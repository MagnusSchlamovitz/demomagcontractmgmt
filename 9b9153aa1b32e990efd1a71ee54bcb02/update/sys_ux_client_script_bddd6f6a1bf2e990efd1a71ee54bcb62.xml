<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Form Modal">3cdd2f6a1bf2e990efd1a71ee54bcb34</macroponent>
        <name>Save Record</name>
        <preset/>
        <required_translations>[ {
  "code" : "",
  "message" : "The following mandatory fields are not filled in: {0}",
  "comment" : ""
} ]</required_translations>
        <script><![CDATA[/**
* @param {params} params
* @param {api} params.api
* @param {any} params.event
* @param {any} params.imports
* @param {ApiHelpers} params.helpers
*/
async function handler({api, event, helpers, imports}) {
    const fields = api.state.fields;
    const requiredFields = api.state.requiredFields;
    let emptyFields = "";
    let emptyFieldsLabel = [];

    const canSubmitForm = () => {
        //Check all mandatory & visible are populated
        let value = false;
        emptyFields = requiredFields.filter((fieldName) => fields[fieldName] && fields[fieldName]['mandatory'] && fields[fieldName]['visible'] && !fields[fieldName]['value']);
        if (emptyFields.length) {
            value = true;
        }
        for (let i = 0; i < emptyFields.length; i++) {
            emptyFieldsLabel.push(fields[emptyFields[i]].label);
        }
        return !value;
    };

    if (!canSubmitForm()) {
        let errorMessage = await helpers.translate("The following mandatory fields are not filled in: {0}", emptyFieldsLabel.join(", "));
        api.setState('errorMessage', errorMessage);
        api.setState('hideErrorMessage', false);
        return;
    }

    if (api.context.props.isGFormSave == "true") {
        for (var i = 0; i < requiredFields.length; i++) {
            if (fields[requiredFields[i]] && fields[requiredFields[i]].visible) {
                api.emit("GFORM#SET_VALUE", {fieldName: fields[requiredFields[i]].name, value: fields[requiredFields[i]].value});
            }
        }
        if (api.context.props.setFieldOnSave) {
            for (const prop in api.context.props.setFieldOnSave) {
                api.emit("GFORM#SET_VALUE", {fieldName: prop, value: api.context.props.setFieldOnSave[prop]});
            }
        }
        api.emit("GFORM#SAVE");
        helpers.modal.close();
    } else {
        var obj = {};
        for (var i = 0; i < requiredFields.length; i++) {
            if (fields[requiredFields[i]] && fields[requiredFields[i]].visible) {
                obj[fields[requiredFields[i]].name] = fields[requiredFields[i]].value ? fields[requiredFields[i]].value: "";
            }
        }
        if (api.context.props.setFieldOnSave) {
            for (const prop in api.context.props.setFieldOnSave) {
                obj[prop] = api.context.props.setFieldOnSave[prop];
            }
        }
        api.data.update_incident.execute({
            table: api.context.props.table,
            sys_id: api.context.props.sysId,
            data: JSON.stringify(obj)
        });
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-17 16:42:00</sys_created_on>
        <sys_id>bddd6f6a1bf2e990efd1a71ee54bcb62</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Save Record</sys_name>
        <sys_package display_value="ContractManagementWorkspace" source="x_snc_topic_1">9b9153aa1b32e990efd1a71ee54bcb02</sys_package>
        <sys_policy/>
        <sys_scope display_value="ContractManagementWorkspace">9b9153aa1b32e990efd1a71ee54bcb02</sys_scope>
        <sys_update_name>sys_ux_client_script_bddd6f6a1bf2e990efd1a71ee54bcb62</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-17 16:42:00</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
